SetSeed(1);
SetVerbose("EndoFind", 0);
SetVerbose("CurveRec", 0);
SetVerbose("CMExp", 2);
SetClassGroupBounds("GRH");

R<x> := PolynomialRing(Rationals());
data := [ [* "6.0.32993536.1",
    x^6 + 10*x^4 + 21*x^2 + 4,
    -32993536, 11, [* 2, 2 *]
*], [* "6.0.149234427.1",
    x^6 - 3*x^5 + 14*x^4 - 23*x^3 + 28*x^2 - 17*x + 4,
    -149234427, 11, [* 2, 2 *]
*], [* "6.0.186306967.1",
    x^6 - 2*x^5 + 12*x^4 - 31*x^3 + 59*x^2 - 117*x + 121,
    -186306967, 11, [* 4 *]
*], [* "6.0.301925376.2",
    x^6 + 14*x^4 + 43*x^2 + 36,
    -301925376, 11, [* 2 *]
*], [* "6.0.1389928896.1",
    x^6 - 3*x^5 + 9*x^4 + 4*x^3 + 12*x^2 + 84*x + 236,
    -1389928896, 11, [* 4 *]
*], [* "6.0.1621833984.1",
    x^6 - 2*x^5 + x^4 - 4*x^3 + 5*x^2 - 50*x + 125,
    -1621833984, 11, [* 2, 2 *]
*], [* "6.0.2217513608.1",
    x^6 + 29*x^4 + 246*x^2 + 512,
    -2217513608, 11, [* *]
*], [* "6.0.3630586487.2",
    x^6 - 3*x^5 + 10*x^4 + 8*x^3 + x^2 + 90*x + 236,
    -3630586487, 11, [* 2, 2 *]
*], [* "6.0.5471265024.1",
    x^6 + 21*x^4 + 60*x^2 + 4,
    -5471265024, 11, [* 2, 2 *]
*], [* "6.0.7577297408.1",
    x^6 + 30*x^4 + 169*x^2 + 200,
    -7577297408, 11, [* 2, 2 *]
*], [* "6.0.9961636864.3",
    x^6 + 23*x^4 + 112*x^2 + 36,
    -9961636864, 11, [* 2 *]
*], [* "6.0.11959609600.1",
    x^6 - 2*x^5 + 12*x^4 - 44*x^3 + 242*x^2 - 672*x + 1224,
    -11959609600, 11, [* 2, 6 *]
*], [* "6.0.12672320000.1",
    x^6 + 26*x^4 + 177*x^2 + 128,
    -12672320000, 11, [* 2, 2 *]
*], [* "6.0.15600166848.1",
    x^6 + 29*x^4 + 226*x^2 + 252,
    -15600166848, 11, [* 4 *]
*], [* "6.0.52289804287.1",
    x^6 - 2*x^5 - 7*x^4 + 45*x^3 - 63*x^2 - 162*x + 729,
    -52289804287, 11, [* 2, 2 *]
*], [* "6.0.52986843648.1",
    x^6 - 2*x^5 + 11*x^4 + 42*x^3 - 11*x^2 + 340*x + 950,
    -52986843648, 11, [* 2, 4 *]
*], [* "6.0.54014775983.1",
    x^6 - 3*x^5 + 29*x^4 - 53*x^3 + 200*x^2 - 174*x + 71,
    -54014775983, 11, [* 2, 6 *]
*] ];


prec := 2000;
for i in [1..#data] do
    print "";
    print "Checking", i;
    taushyp, tausnonhyp := EnumerationUpToGalois(data[i] : prec := prec, exp := 4);
    print #taushyp, #tausnonhyp;
    assert #taushyp ne 0;
end for;


function CompareEntries(tup1, tup2);

d1 := Discriminant(Integers(NumberField(tup1[2])));
d2 := Discriminant(Integers(NumberField(tup2[2])));
if d1 lt d2 then
    return 1;
elif d1 eq d2 then
    return 0;
else
    return -1;
end if;

end function;

Sort(~data, CompareEntries);
print data;

