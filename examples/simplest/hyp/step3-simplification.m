function HeightAlg(alpha);

p := MinimalPolynomial(alpha, Rationals());
p *:= LCM([ Denominator(c) : c in Coefficients(p) ]);
p /:= GCD([ Integers() ! c : c in Coefficients(p) ]);
return Max([ Abs(c) : c in Coefficients(p) ]);

end function;


SetSeed(1);
load "conic_123.m";

prec := 1000;
F := RationalsExtra(prec);
R<x> := PolynomialRing(F);

// CM field: x^6 + 10*x^4 + 21*x^2 + 4;
// Field of definition:
f := x^4 - 5*x^2 - 2*x + 1;
// Degree 2 extension with two rational Weierstrass points:
g := x^8 - 4*x^7 + 10*x^5 + 7*x^4 - 10*x^3 - 18*x^2 - 6*x + 1;
L := NumberFieldExtra(g);
r := Roots(f, L)[1][1];
K := sub< L | r >;
ZZL := Integers(L);
ZZK := Integers(K);

J0 := [ 1/76055841*(24552856496*r^3 + 59903720002*r^2 + 14171894268*r - 7524906872), 1/76055841*(24552856496*r^3 + 59903720002*r^2 + 14171894268*r - 7524906872), 1/138827782805214744*(51184534348219470630320*r^3 + 121949857174852557790527*r^2 + 33978045654137668389866*r - 21510593846918015366219), 1/10620325384598927916*(-10768036518812597642905000*r^3 - 25603976683485013627062494*r^2 - 7151745899215399205435327*r + 4527711852356603515891153), 1/3334314876447141012795696*(-1109510625250500993254990823224118*r^3 - 2640591333259007078144877377544787*r^2 - 736552882565608721413831418286528*r + 466225383091914066247680107238905), 1/4846426672915919462098544136*(35369972896652893060462986868891100433*r^3 + 84176078150965850661571707425318866505*r^2 + 23479183069503672777082598025694181858*r - 14862042805375522669209935952812780009), 1/5353653688503299593001777765273760*(-891515447150350768172025568141536745380349056*r^3 - 2121700046617372058711008133374169798165075859*r^2 - 591806578005097990332892296668325747310312974*r + 374605940027611739611234301342693319840719288), 1/17692754709765704494952275158676722048*(-148497598656363529830344090674293522985140777753255*r^3 - 353406158323721660926429753214409462008209065287899*r^2 - 98575647397151768791354303483582024257447688380989*r + 62397138778431096211749215477794076971676147401891), 1/9772239208844891563696990138391913888771840*(-238086047076826054611906919662376685250718277904859003846*r^3 - 566615695714430835059159997205789724005385109122524839263*r^2 - 158046215762671956885693369557865743820050340639779232276*r + 100041260088885072785801697173844097871130839417025410563) ];

R<x> := PolynomialRing(L);
f1 := x^2 + 1/29947484651310390402583862048107864872684903907115483900851149793563150\
    013147354984211573576323526395353777421159615129007572823030199329930252072\
    421839343670437323245089091773867076858717060776029231154341385729856820238\
    923772336*(2307152558308865697044172480596571543331809039248212936465077101\
    922630477940305675868504634405559862797201858180933369860260928167111329168\
    442476240072091475326791463225364642142476639671707196723987657460578816808\
    2352146671729205*r^3 + 86608769227894680172990207972479053047685574368361\
    302437316800966657947752494714030736642048041317200147778214287815341626172\
    206037111850067932202504486200747507247290111798647665557601996262691865945\
    020308765490166127852677241130*r^2 +
    232235506874303444470895865403996061186946176200151005727246172246623046614\
    742221557417077298393160278112734681483618544055893330377813241035070298197\
    632546717958723176957575761457535195859832428224872362469803231789305497158\
    70705*r - 409720729585364346306523517838109168061168250468269067979854343\
    797506123899052794214975536604217901625972286741314225142962150242279106939\
    348911958859643940012481775155985662922316722432119853881512168727333625439\
    34544291666999645)*x + 1/25558510414289765394902529882840073330832672493268\
    700928303443979587594627614238705731792738086977717948431072791323263131416\
    787470983449507292078106614035656233164498886011659197389278124546128307284\
    1675448277105400579569678110926656450979710783577229988065778688*(-52794760\
    239146355120650422275965406026750752304202652610478688016925276813244092946\
    177188587400101498021785572112476875970502203276762756836742456678716258803\
    671668666703089110693355744034402925263060105216932716862298377998995814662\
    8240065645799816141152311724250*r^3 -
    111094748511668170049259156097141973133079536709202308928015815980137593774\
    721115572268235262928342255467486095467636587717532691919636472623522784777\
    715343464314573556144811592765286783071532634626788039957769305465028972100\
    4295273497596677700135675805123452635875*r^2 -
    262574300691538679354853916250343609040300209263004167647458910493704172951\
    782689811269823815523091953792630124839073416036142662617042339751531216961\
    754310056103094432695095260962505708017662900686720058639430002972680828974\
    286374553867997687747827834903912631750*r +
    232713868069177969676454934508863756469647593200858507998796438891808976028\
    684089707637958204293169266149508805411396812813732033505801234484779297998\
    415728355409580516461752644678073838752204781590428414951267518402099564669\
    108358983853122371864289478271656723950);

f2 := x^2 + 1/1048443472695083085944689317188841708937493294649491413889790210322944703\
    63748041878956623460167413993187249675354043804572434042217084898992414100490\
    20182319551908757153071687282501009694865848842858199842042426239192545275354\
    11952*(4663040483081756866297361905247888535138187540732210686515823867129969\
    30269535748033151325760977410420412364751965094314769588126063694235793225881\
    43600465351966124637550443316402062860141158168059301801990728618472046382037\
    88737495*r^3 + 122581273275096393647535302167173392343188731617590624271471\
    28586682587929272069411736619865165949450309294768841784560037820012825845479\
    38243932047417695823638903318629893468674773181253057044379388478815274078754\
    1653244243454129270*r^2 + 3574219692234389153350004699497453541686308830828\
    37686378424053443436841616291314110469579124731669388904717807062046357429342\
    76741635594609776637292778106671600698065903071260111997370631745777025312809\
    71512461549890671599683397545*r - 29276842411956129887397732497123316716258\
    36094491445538261835677233240978262879197459244800125274503052691776634469494\
    48853834764725224826761684009476185917321339367624706859975752354970415112440\
    9606587784451173445976476483353573975)*x +
    1/894788117522213558395258414685203890588725460991978428460586390871193262119\
    62383656766949619387297875600732268776133940234134500760435525847263063946265\
    13745916986713931908087455536548717897668789085205681620614997397443976642135\
    005871876523805948342568748272495616*(108179435863379948863348761940778818764\
    81662044670557136168333353814568992441586858690669844931742385092030924853436\
    64475059556491155629471129184007550060799706807413149788024145133741227676217\
    993099684007395290199934012833406241552977180612093530006336223991093148950*r^3 +
    2578691945814618729293964639813844154442191536229426752750372339471343\
    65609703584978070806171406523890127420163145812704814356881876742708019594172\
    95936128144842725921694877598050411707382515164684123747394377609704937288206\
    27036498079662729867388476455784801368770325*r^2 +
    72008218180749456365158188041936158916068929856626369186469363624852743796664\
    04641863352535945581706986172272594779145120525074210564933205250381645174690\
    02590701166581190521474758647086378833421786915771818280853800051009555643413\
    331630411862978598918435100943005950*r -
    45442197477052218182615517170609137283523026885156562074551662133554505329102\
    87627599235271526504250484233706755975380327069675254771713600523306421510726\
    29991428325846377975782274048771522349152911188245342417637660668867128771682\
    172396536869607187150091322850812550);

f3 := x^4 + 1/8267745913970538873233550755100737402666152003731343140076729065793499184\
    57338841729337161362541066900954942145623333867893698363978735917707529385757\
    91022142451114861922062512598800515695889888362581709337902219620611458862043\
    70145961291944995126010952905836443876552389808561199462690965238474582773401\
    76533253196962096533844666461187730002881631230370545207163396833981983951831\
    02993391852455921813368226510634066834186408*(2961398400238934559324516149130\
    25199232104877630406904150480621866770461026734264750497332249550969306769519\
    53212547569778450183599144976290914913280896103997594250447437642812146107636\
    34121302798159152826227455631906826705865840261549776537431845965584336838202\
    48331389549033766027056200559894202462556103617066251296082377138416153878873\
    28507098344877783384982815906558520404900781010523488969425730496914340016477\
    8234477425*r^3 + 8842242703189833355045293783801013590440572520495490760478\
    21799017869054462061469700885127111615752378562593425192604203284398989182250\
    50056620936561033081700122457674454242894922054325713944288354893529254931473\
    66413221761778505344647350667088906558286460007414412708392179427203450911332\
    57239179739459408005975137096559287874533704056022014934278322557171074760076\
    834480649745089554937865855748782786603717223601561621735725*r^2 +
    27352382678316333229603743225776288778585278466512306811303373111681793945538\
    37984377061930825770327220986981198772928598666554594432520515879865950159940\
    56526703688310028242235019296011949533667729379940484498682941614457180160958\
    58761934435482564288164316786131599205224479669337948399674079607693438439844\
    98598109790634285661844705049961971613234076770805462226749102009718175250386\
    41353083326592003334856694216892938630700*r -
    25799926964878562841856343317415769554598526598037383058321246842364629241151\
    26569396325357471557143965280631451064276953484919394449608486560321375751628\
    66281553274428566189726538844536341703993970936041187378081320615605704020388\
    49639993446555409545664405896923376082225762513516341335236149392384403463633\
    00908890179181053024980207327794565254535847058821737545731171043601970259280\
    50062639097796924061430074371493627002840)*x^3 +
    1/705606071779626000395321241503931031327837577265137833670314800512865706263\
    70541568278346454483560455746813994181403695895358417155443245642466703694545\
    10565647108632215391352352074816915110622450746533583137579677667555441256392\
    96507707741109302500656850160350605275128828074178797102472722462902562706394\
    08077091987615990412076676671517071974742721711162227588655546124811023991916\
    7024431376897994411629351184940659018926003608950219180746999996539065291264*\
    (2728946335301729714222156264291679587770958516237813327491286104680061585121\
    94537359851502187404154910446223509962835633634907555731903935210956079063111\
    97199486828929737560527948352807242125874951473769968418310979540611784777505\
    59961389422415672496832881201920101583783184022930776671173459114242140305869\
    99235707154688288650340826203312414909173426072182181350284258505998305006476\
    62630529507143711753747313978283777337183837485475168028881640141153011286960\
    0*r^3 + 6515281788800723510700468778806717074979606258261708563816240577734\
    53626558712435669188306912509656960970058368856285892989559159126835452103485\
    81999566497518739306034007039434815422279743403350512805268246085376529878254\
    93334761079751685365473173067436535185148063752458306804197139192506827401447\
    00578415278246921127293732115215769488362452160388560950162963077517498391132\
    55662267846010409120888502202451985466725369862862730678505933518769143163458\
    0279526475*r^2 + 1821290441806342128927401302824336610394523041403056677183\
    03710317693605104266233293960728733475909074657740058252394551047477900881259\
    53355387866440507504617028700146790474930909706693241589074101837723241406261\
    00950954784458406316916169904841448872150566400859991349449797082929527520342\
    81713399272137986738865596659993661407802625651684945161116698939042238362170\
    77292914829788126888798799462202163297239319786288035765081743519052453539749\
    9716481041057007600*r - 114770738423247082936144872148098675238078470526803\
    50092822432154821395979841318483899762941608841879324627016618381456844154633\
    61906809809955315612102618817620676156095709886455433161463716008895548329622\
    42121306577192476597677531025584397320208261034356862779926965173293997504645\
    61922799534971598425474193263225557938550455342217992300700103096894057160297\
    94254754539622960037286299933094803332730838992681242846486102671602312412842\
    08811761668004716536138750)*x^2 + 1/15054887199997739775291482991386197027994\
    84501611828414296339196525853581581732437662741651259389709920481041949031446\
    52931920174949655651973089608259619272708342797898905242515051812237817623203\
    47978021699464556714645990541503303369897185968886967330684157949575764666986\
    31115118825577471333312465603934943550963715286443946956427492756758661033265\
    40233493835082106601753499744318823514690999834984320483019853021843979524921\
    2205234102904376897310393922717999396810721096277121179063164182528*(34766453\
    78544660310780439757372159486026559508461359256788305522392828996625111291277\
    88213348098533351709633129327228801800220914867475251762326139003939735654437\
    86293785279656587871085881217547683893277302774670106624949795904875278308352\
    70759506800363444291680294119258295385792771244205861212437251963810863516553\
    02274564676668719361557379798029342970515596053832278682499034509085936679232\
    98995581553016959660820184989649117637635719150345432257978738798179779345396\
    233043489845028929677361375*r^3 + 82743639478849054964830120154898437262782\
    64239496632823561859551277394954624019563569067963578786116277020807880674445\
    41345395976725356051941391235777949269106352168495084457027797778631469580918\
    23415966131694380166500629548670191184561039171583267976958743329187100719641\
    37078781528042264762461962806211796792554711689310629167759714207074721645918\
    22660577458320225971115513713134157125242128332909921139723976042676515385231\
    13334841714071539770719783838015108601789027313756789505707127386745125*r^2
    + 230803659727842102844305698055463816584591342407943321918049416475918822434\
    07920481537393010351613062369018422619145026230238026243243955887397513797525\
    96515745171845786583564672448280461937178226629876011017681102662473663908136\
    81631711300191744556571803721401349103293044201282482527763117489835394377307\
    07762833700126655523987888887219260886315652474781326983168857815362693885039\
    19107091677541063184188111396119068281646773185829856063122548151859094596309\
    2490200006860349219247203266440972625*r -
    14609462089512833361219653953931031824382228432543096765658491033945393550472\
    56559614135298014084995753669130219506195656203306101082974852872313629421150\
    42012434376225120152133031946024657113859195865710719495918870224734734794553\
    00215872532762292514070680274243933925865402036130060857479722711838843441444\
    35247545482693141851263981863568305713910600567395586049743748114652971955646\
    44363314613837408689245429831956846414761314095999072749940908396685317882087\
    12666396580046842826146858005401125)*x +
    1/256970156770921565059598735072756750214008548318429528789896530475671954036\
    92886847876228086978195129741216069707371344729946098459050052149926619211516\
    40327370095904890776885261043271373035489771350177523500127524052781841826439\
    49179813886329056959232388462356640330432331558689389789927811440437450722171\
    49876869175187040380758451069601820870949171439271780564481328081233419500797\
    60643623812443571562968748370763824301432853691482349569643617462409869075951\
    7630770146506348586886515657612504975732532079853144185891164520448*(10852118\
    51436761504978715272909058831337620073962156523304211940959757956080394751414\
    36874090491453381177613410278522004742479493552826264757872526777008201194754\
    68199199774665275601324120212355244369520261709386215090540587690978217439572\
    05798410458535608764915152987256617271094722171867215124836043511754490198973\
    01904270978447826687111260213541016414829685051515822217110606220757564264724\
    78355742967040931740952555682883508769100732981482881873350939226772898400219\
    095561413982732457145345114496479605953084300912978223927925000*r^3 +
    25826737966347406293221546172770017440262043922682897955154707812032425513367\
    43721738330498196436780865336437936735612936546250311906910503568297138613236\
    39680155791585180013289132196742684630733082074429607216187308156659330558883\
    39588543838706462813443407984440039181833736606713664686352456388681903344948\
    49251116142432969940662394379874737653592477366610444226645873088558088902192\
    51469949371269127615162425736934826427933347794085064669440441366061566768157\
    78726913182133147081602022913386957757034055618345587282635626433290625*r^2
    + 720386054056943435355312990992835892013539546799650779558420532653981874373\
    53026573515701077069622671506077286972040022546540057935089920197235148987601\
    91289583907960855112414844328036594887642259734147199872804826640224847026989\
    15208613701060895678105179149896169978471044062075374327721157202758128899872\
    85129044153614197665294117639816432386427994285294356733650400569482880474006\
    11688592941174461729031013755850627251393558216223400465572807805834342079686\
    099686879877080720343643813180237114882127556374825480809467946093131250*r -
    45599510340430245078121298730806569375470313957192700658835279141049125298475\
    09854239297819755493799805274177897633747119045222583369794584609327401963551\
    27389682176475208256535668039613110062764513184018452886947607006841374649289\
    64753553499800943499332125726407392308150625306581174231980976341636001260785\
    52854050486203032799349755768213114955300762001262945666731096341133358579372\
    15414781411884325430057958439876970381878363056886188528156877749725929236247\
    3914252139512902713152569104098140802312777240848521770500436662248125);

// First (way too large) polynomial
f := f1*f2*f3;
print "";
print "f = ", f;
J, W := ShiodaInvariants(f);
assert WPSNormalize(W, J) eq J0;

// We know what the quadratic extension is and can fix two roots at pm sqrt d accordingly
r1 := Roots(f1)[1][1];
r2 := Roots(f1)[2][1];
r3 := Roots(f2)[1][1];

la := (r3 - r1)/(r3 - r2);
subst := (r1*x - la*r2)/(x - la);
g := Evaluate(f, subst)*(x - la)^8;
print "";
print "g1 = ", g;
assert Denominator(g) eq 1;

// Normalized polynomial with roots 0, infty, 1
g := Numerator(g);
g /:= LeadingCoefficient(g);
print "";
print "g2 = ", g;

g /:= Coefficient(g, 4);
print "";
print "g3 = ", g;

assert Degree(g) eq 7;
assert Evaluate(g, 0) eq 0;
assert Evaluate(g, 1) eq 0;

// The curves C: y^2 = f(x) and C': y^2 = g(x) are isomorphic by construction
J, W := ShiodaInvariants(g);
assert WPSNormalize(W, J) eq J0;

print [ Norm(c) : c in Coefficients(g) ];

I0 := ideal<ZZL | L ! 1>;
csg := Coefficients(g);
csg := csg[2..8];

print "";
for i in [3,5] do
    print "i = ", i;
    c := Coefficient(g, i);
    print "c = ", c;
    print Factorization(ideal< ZZL | c >);
    print "Norm(c) = ", Norm(ideal< ZZL | c >);
end for;

I := Factorization(ideal< ZZL | 2 >)[1][1];
test, alpha := IsPrincipal(I);

// Q: What is the reason to evaluate g(alpha^2*x) = polynomial of degree 7 in x with coeffs alpha^2*old coeffs. 
// I suppose you know exactly what you are doing here and you know that the factor 2 is in the coeffcients of g.
// Am I right?
// Furter you reduce the size of all the coefficients by a certain common factor.
// Q: Why always the 4-th coefficient? 
g := Evaluate(g, alpha^2*x);
g /:= Coefficient(g, 4);
print "";
print "g4 = ", g;
csg := Coefficients(g);
csg := csg[2..8];

print "";
for i in [3,5] do
    print "i = ", i;
    c := Coefficient(g, i);
    print Factorization(ideal< ZZL | c >);
    print "Norm(c) = ", Norm(ideal< ZZL | c >);
end for;

Gp, Gf, Gphi := AutomorphismGroupPari(L);
sigma := Gphi(Gp.2);
//print "sigma: ", sigma;

// We have equality of conjugated ideals and now go hunting for equality of conjugated coefficients
assert ideal<ZZL | csg[1]> eq ideal<ZZL | sigma(csg[7]) >;
assert ideal<ZZL | csg[2]> eq ideal<ZZL | sigma(csg[6]) >;
assert ideal<ZZL | csg[3]> eq ideal<ZZL | sigma(csg[5]) >;
assert ideal<ZZL | csg[4]> eq ideal<ZZL | sigma(csg[4]) >;

//print "";
U, phiU := UnitGroup(ZZL);
u := csg[5]/sigma(csg[3]);
print "";
print "u: ", u;
print "u @@ phiU: ", u @@ phiU;

print "";
print sigma(phiU(U.1)) @@ phiU;
print sigma(phiU(U.2)) @@ phiU;
print sigma(phiU(U.3)) @@ phiU;
print sigma(phiU(U.4)) @@ phiU;
print sigma(phiU(U.5)) @@ phiU;
print sigma(phiU(U.6)) @@ phiU;

alpha := phiU(-U.3 - 2*U.5 - U.6);
g := Evaluate(g, alpha*x);
g /:= Coefficient(g, 4);
print "";
print "g5 = ", g;
csg := Coefficients(g);
csg := csg[2..8];

// We now have equality of conjugated coefficients!
assert ideal<ZZL | csg[1]> eq ideal<ZZL | sigma(csg[7]) >;
assert ideal<ZZL | csg[2]> eq ideal<ZZL | sigma(csg[6]) >;
assert ideal<ZZL | csg[3]> eq ideal<ZZL | sigma(csg[5]) >;
assert ideal<ZZL | csg[4]> eq ideal<ZZL | sigma(csg[4]) >;

J, W := ShiodaInvariants(g);
assert WPSNormalize(W, J) eq J0;

m := RR ! Max([ HeightAlg(c) : c in Coefficients(g) ]);
print Log(m) / Log(10);

// Now our goal is to make the coefficients smaller, only playing with units that do not affect our nice descent property
u1 := L ! phiU(U.2);
u2 := L ! phiU(U.4 - 2*U.6);
assert sigma(u1) eq u1^(-1);
assert sigma(u2) eq u2^(-1);

alpha := u1^(-2)*u2^(-1);
g := Evaluate(g, alpha*x);
g /:= Coefficient(g, 4);
print "";
print "g6 = ", g;

csg := Coefficients(g);
csg := csg[2..8];

assert csg[1] eq sigma(csg[7]);
assert csg[2] eq sigma(csg[6]);
assert csg[3] eq sigma(csg[5]);
assert csg[4] eq sigma(csg[4]);

infs := InfinitePlaces(L);
absc := [ Log(Abs(Evaluate(csg[3], inf))) : inf in infs ];
abs1 := [ Log(Abs(Evaluate(u1, inf))) : inf in infs ];
abs2 := [ Log(Abs(Evaluate(u2, inf))) : inf in infs ];
M := Matrix([abs1, abs2]);
Lat := Lattice(M);

v := Vector(absc);
ws := ClosestVectors(Lat, v);
w := ws[1];
print [ Round(c) : c in Eltseq(NumericalSolution(M, w)) ];

m := RR ! Max([ HeightAlg(c) : c in Coefficients(g) ]);
print m;
print Log(m) / Log(10);

// Descent step
r := 1/3*(-5*L.1^7 + 24*L.1^6 - 20*L.1^5 - 32*L.1^4 - 8*L.1^3 + 53*L.1^2 + 43*L.1 - 5);
subst := r*(x + 1)/(x - 1);
h := R ! (Evaluate(g, subst)*(x - 1)^8);
subst := (x + r)/(x - r);
h := R ! (Evaluate(g, subst)*(x - r)^8);
h /:= LeadingCoefficient(h);
print "";
print "h = ", h;
assert &and[ c in K : c in Coefficients(h) ];

R<x> := PolynomialRing(K);
h := &+[ (K ! Coefficient(h, i))*x^i : i in [0..8] ];
I := ideal< ZZK | Coefficients(h) >;
test, d := IsPrincipal(I);
h /:= d;
csh := Coefficients(h);

J, W := ShiodaInvariants(h);
assert WPSNormalize(W, J) eq J0;
print "";
print "h final = ", h;

